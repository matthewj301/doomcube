# =====================
# PRINT_START (Beacon-aware, KAMP-aware, no hard-coded units)
# =====================
[gcode_macro PRINT_START]
description: Start the print
gcode:
  SAVE_GCODE_STATE NAME=STATE_PRINT_START

  {% set svv = printer.save_variables.variables %}
  {% set vars = printer["gcode_macro _PRINTER_VARS"] %}
  {% set bed_temp = params.BED_TEMP|default(0)|float %}
  {% set hotend_temp = params.HOTEND_TEMP|default(0)|float %}
  {% set chamber_target_temp = params.TARGET_CHAMBER_TEMP|default(0)|float %}

  {% set mat = params.MATERIAL | default(vars.default_material) %}

  {% set travel_f = (vars.travel_speed|float * 60)|int %}
  {% set z_f = (vars.z_travel_speed|float * 60)|int %}
  {% set max_z = printer.toolhead.axis_maximum.z|float %}

  {% set hop = [vars.z_hop_height|float, max_z - 2]|min %}

  MAYBE_HOME

  SAVE_VARIABLE VARIABLE=current_material VALUE='"{mat}"'

  CLEAR_PAUSE
  RESET_MULTIPLIERS

  G90    

  BED_MESH_CLEAR
  SET_GCODE_OFFSET Z=0
  
  {% if "beacon" in printer.configfile.settings %}
    # Let PREHEAT orchestrate heating and (for high-temp) toolhead-assisted mixing at 150C
    PREHEAT BED_TEMP={bed_temp} HOTEND_TEMP={printer["gcode_macro BEACON_VARS"].beacon_contact_calibration_temp|int} MATERIAL="{mat}" QUICK=0 TARGET_CHAMBER_TEMP={chamber_target_temp}
    # Home Z with Beacon contact - calibrate z-offset and geneate new model (Should be done hot, hense after PREHEAT)

    # Clean nozzle if macro is defined. Too many ways to clean a nozzle so user has to take care of setting up the CLEAN_NOZZLE macro correctly for their setup
    {% if printer['gcode'].commands['CLEAN_NOZZLE'] %}
      CLEAN_NOZZLE
    {% endif %}
  
  #  Calibrate z offset only after tilt/mesh
    G28 Z METHOD=CONTACT CALIBRATE=1                                                         
  {% else %}
    # Home Z, no need to wait for special beacon stuff.  
    G28 Z
    # No Beacon: let PREHEAT drive either simple warmup or mixing based on MATERIAL/thresholds
    PREHEAT BED_TEMP={bed_temp} HOTEND_TEMP={hotend_temp} MATERIAL="{mat}" QUICK=0 TARGET_CHAMBER={chamber_target_temp}
    
    # Clean nozzle if macro is defined. Too many ways to clean a nozzle so user has to take care of setting up the CLEAN_NOZZLE macro correctly for their setup
    {% if printer['gcode'].commands['CLEAN_NOZZLE'] %}
      CLEAN_NOZZLE
    {% endif %}
    
  {% endif %}

  # Level everything out
  {% if "quad_gantry_level" in printer.configfile.settings %}
    QUAD_GANTRY_LEVEL
  {% elif "z_tilt" in printer.configfile.settings or "z_tilt_ng" in printer.configfile.settings %}
    Z_TILT_ADJUST
  {% else %}
    RESPOND MSG="No gantry leveling module detected - skipping."
  {% endif %}
  
  # KAMP or default Beacon mesh depending on what you have configured
  {% if "bed_mesh" in printer.configfile.settings %}
    RESPOND MSG="Starting bed mesh calibration..."
    BED_MESH_CALIBRATE
  {% endif %}


  {% if "beacon" in printer.configfile.settings %}
    # Clean nozzle again if macro is defined. Too many ways to clean a nozzle so user has to take care of setting up the CLEAN_NOZZLE macro correctly for their setup
    {% if printer['gcode'].commands['CLEAN_NOZZLE'] %}
      CLEAN_NOZZLE
    {% endif %}
    
    # Home Z with Beacon contact - just calibrate z-offset after leveling everything
    G28 Z METHOD=CONTACT CALIBRATE=0 
  {% endif %}

  # park toolhead
  {% if printer.configfile.config["gcode_macro SMART_PARK"] is defined %}
      SMART_PARK                                                                              # Parks using KAMP
  {% else %}
      PICK_PARK_LOCATION
  {% endif %}

  SET_DISPLAY_TEXT MSG="Heating hotend to {target_extruder}c"                                 # Displays info
  # Wait for final print temp
  M109 S{hotend_temp}

  # Apply thermal expansion compensation if present
  {% if printer.configfile.config["gcode_macro _BEACON_SET_NOZZLE_TEMP_OFFSET"] is defined %}
    RESPOND MSG="Setting Beacon thermal expansion compensation"
    _BEACON_SET_NOZZLE_TEMP_OFFSET                                                          # Adds toolhead expansion offset (REQUIRES ADDITIONAL MACROS NOT BY DEFAULT Found at:https://github.com/YanceyA/Beacon_Thermal_Expansion_Compensation )
  {% endif %}

  SET_GCODE_OFFSET Z_ADJUST=0  

  # Purge strategy moved to slicer due to Happy Hare

  RESPOND MSG="Starting Print..."
  SAVE_VARIABLE VARIABLE=is_printing_gcode VALUE=True
  G90
  RESTORE_GCODE_STATE NAME=STATE_PRINT_START

# =====================
# PRINT_END (unit-safe; avoids duplicate M84)
# =====================
[gcode_macro PRINT_END]
description: Consistent end-of-print routine. reason codes: 0 = cancelled, 1 = completed
gcode:
  {% set reason = params.REASON|default("complete")|lower %}
  {% set reason_code = 1 if reason == "complete" else 0 %}
  RESPOND MSG="Passed reason: {reason}, code: {reason_code}"

  SAVE_GCODE_STATE NAME=STATE_PRINT_END
  {% set vars = printer["gcode_macro _PRINTER_VARS"] %}
  {% set f_xy = (vars.travel_speed|float * 60)|int %}
  {% set f_z  = (vars.z_travel_speed|float  * 60)|int %}
  {% set retract_speed = (vars.retract_speed|float*60)|int %}
  {% set retract_length = vars.end_retract_length|float %}

  # z bounds
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set hop = [vars.z_hop_height|float, max_z - 2]|min %}

  M400

  TURN_PART_COOLING_FAN_OFF

  G92 E0
  {% if printer.extruder.can_extrude %}
    G91
    G1 E-{retract_length} F{retract_speed}
    G90
  {% endif %} 

  PICK_PARK_LOCATION

  {% if "beacon" in printer.configfile.settings %}
    _BEACON_REMOVE_NOZZLE_TEMP_OFFSET
  {% endif %}

  # Clear mesh, cool down in a controlled way
  {% if "bed_mesh" in printer.configfile.settings %}
    BED_MESH_CLEAR
  {% endif %}

  # COOLDOWN_SEQUENCE QUICK={reason_code}
  TURN_OFF_HEATERS
  DISABLE_ALL_MOTORS
  ALL_FANS_OFF
  
  RESET_TO_START_STATE

  RESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0


[gcode_macro PAUSE]
rename_existing: PAUSE_BASE
gcode:
  {% if printer.pause_resume.is_paused %}
    {action_respond_info("Already paused...")}
  {% else %}

    {% set vars   = printer["gcode_macro _PRINTER_VARS"] %}
    {% set retract_speed = (vars.retract_speed|float*60)|int %}
    {% set retract_length = vars.end_retract_length|float %}

    # Record hotend temp variable for reference in resume macro
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=printing_target_temp VALUE={printer['extruder'].target}  
    SAVE_GCODE_STATE NAME=PAUSE # Capture position
    PAUSE_BASE # Pause print

    # Retract
    {% if printer.extruder.can_extrude %}
      G91
      G1 E-{retract_length} F{retract_speed}
      G90
    {% endif %}

    TURN_PART_COOLING_FAN_OFF    
    PICK_PARK_LOCATION

    # Save parked position in case toolhead needs to move during pause
    SAVE_GCODE_STATE NAME=PAUSEPARK                                                 

    # Turn off hotend
    M104 S0                                                                              
    RESPOND MSG="Hotend turned off."

    # Set idle timeout
    SET_IDLE_TIMEOUT TIMEOUT={vars.pause_idle_timeout}
    RESPOND MSG="Setting idle timeout to {vars.pause_idle_timeout} seconds."
  {% endif %}


[gcode_macro RESUME]
rename_existing: RESUME_BASE
variable_printing_target_temp: 0
gcode:
  {% set vars = printer["gcode_macro _PRINTER_VARS"] %}
  {% set return_speed = (vars.travel_speed|float / 2) %}
  {% set retract_speed = (vars.retract_speed|float*60)|int %}
  {% set retract_length = vars.end_retract_length|float %}
  
  # go back to parked position in case toolhead was moved during pause
  RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED={return_speed}                    

  # Restore and wait for hotend temp if var correctly set
  {% if printing_target_temp > 0 %}
    RESPOND MSG="Resuming: heating hotend to {printing_target_temp}C"
    M109 S{printing_target_temp}
  {% endif %}

  # prime the nozzle
  {% if printer.extruder.can_extrude %}
    G91
    G1 E{retract_length} F{retract_speed}
    G90
  {% endif %}
  
  # Move back to print
  RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED={return_speed}
  # Resume print                    
  RESUME_BASE

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
  CLEAR_PAUSE
  HEATER_INTERRUPT
  PRINT_END REASON=cancel
  BASE_CANCEL_PRINT


[gcode_macro M600]
gcode: 
	SAVE_GCODE_STATE NAME=M600
	UNLOAD_FILAMENT
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=m600 VALUE=1
	PAUSE
	RESTORE_GCODE_STATE NAME=M600